#version 450

#extension GL_ARB_separate_shader_objects : enable

#include "common.glsl"

layout (set = 0, binding = 0) uniform GlobalUniformBuffer 
{
	GlobalUniforms globals;
};

#define NUM_WAVE_PARTICLES 512
#define DISPLACEMENT_IMAGE_SIZE 1024

#define WAVE_HEIGHT 0.2

layout (local_size_x = 16, local_size_y = 16) in;

struct WaveParticle
{
	vec4 position;
	vec4 velocity;
	vec4 radiusFalloff;
	//float radius;
	//float falloff;
};

layout(std140, set = 1, binding = 0) buffer WaveParticles 
{
   WaveParticle particles[ ];
};

layout (set = 1, binding = 1, r16) uniform image2D displacementMapImage;

void main()
{
	float height = 0.0;
	
	// sum the height influence of all the particles at this pixel
	for (int i = 0; i < NUM_WAVE_PARTICLES; i++)
	{
		vec2 uv = gl_GlobalInvocationID.xy / vec2(DISPLACEMENT_IMAGE_SIZE, DISPLACEMENT_IMAGE_SIZE);
		vec2 pos = particles[i].position.xy;
		
		float dist = distance(uv, pos);
		
		/*
		if (dist < 0.05)
		{
			height += 1.0;
		}
		*/
		
		float alpha = clamp(dist / particles[i].radiusFalloff.x, 0.0, 1.0);
		float addedHeight = mix(WAVE_HEIGHT, 0.0, alpha);
		height += addedHeight;
	}
	
	imageStore(displacementMapImage, ivec2(gl_GlobalInvocationID.xy), vec4(height, height, height, height));
}
